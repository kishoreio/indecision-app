{"version":3,"sources":["Components/Header.js","Components/Action.js","Components/Option.js","Components/Options.js","Components/AddOption.js","Components/OptionModal.js","Components/IndecisionApp.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","subTitle","defaultProps","Action","onClick","handlePick","disabled","hasOption","Option","count","optionText","handleDeleteOption","Options","handleRemoveAll","options","length","map","element","index","key","AddOption","state","error","undefined","handleAddOption","e","preventDefault","option","target","elements","value","trim","setState","this","onSubmit","type","name","React","Component","OptionModal","isOpen","selectedOption","contentLabel","ariaHideApp","closeTimeoutMS","onRequestClose","clearOptionModal","IndecisionApp","handleDeleteOptions","prevState","filter","randNum","Math","floor","random","indexOf","concat","json","localStorage","getItem","JSON","parse","err","prevProps","stringify","setItem","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ee5fa277.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = (props) => (\n  <div className=\"header\">\n    <div className=\"container\">\n      <h1 className=\"header__title\">{props.title}</h1>\n      {props.subTitle && <h2 className=\"header__subtitle\">{props.subTitle}</h2>}\n    </div>\n  </div>\n);\n\nHeader.defaultProps = {\n  title: \"Indecision App\"\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Action = (props) => (\n  <div>\n    <button\n      onClick={props.handlePick}\n      disabled={!props.hasOption}\n      className=\"big-button\"\n    >\n      What should I do?\n    </button>\n  </div>\n);\n\nexport default Action;\n","import React from \"react\";\n\nconst Option = (props) => (\n  <div className=\"option\">\n    <p className=\"option__text\">\n      {props.count}. {props.optionText}\n    </p>\n    <button\n      className=\"button button--link\"\n      onClick={() => {\n        props.handleDeleteOption(props.optionText);\n      }}\n    >\n      Remove\n    </button>\n  </div>\n);\n\nexport default Option;\n","import React from \"react\";\nimport Option from \"./Option\";\n\nconst Options = (props) => (\n  <div>\n    <div className=\"widget-header\">\n      <h3 className=\"widget-header__title\">Your Options</h3>\n      <button className=\"button button--link\" onClick={props.handleRemoveAll}>\n        Remove All\n      </button>\n    </div>\n    {props.options.length === 0 && (\n      <p className=\"widget__message\">Please add an option to get started</p>\n    )}\n    {props.options.map((element, index) => (\n      <Option\n        key={element}\n        optionText={element}\n        count={index + 1}\n        handleDeleteOption={props.handleDeleteOption}\n      />\n    ))}\n  </div>\n);\n\nexport default Options;\n","import React from \"react\";\n\nclass AddOption extends React.Component {\n  state = {\n    error: undefined\n  };\n\n  handleAddOption = (e) => {\n    e.preventDefault();\n    const option = e.target.elements.option.value.trim();\n    const error = this.props.handleAddOption(option);\n    this.setState(() => ({\n      error\n    }));\n    if (!error) {\n      e.target.elements.option.value = \"\";\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.error && (\n          <p className=\"add-option-error\">{this.state.error}</p>\n        )}\n        <form className=\"add-option\" onSubmit={this.handleAddOption}>\n          <input\n            className=\"add-option__input\"\n            type=\"text\"\n            name=\"option\"\n          ></input>\n          <button className=\"button\">Add Option</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default AddOption;\n","import React from \"react\";\nimport Modal from \"react-modal\";\n\nconst OptionModal = (props) => (\n  <Modal\n    isOpen={!!props.selectedOption} //to open the modal or not\n    contentLabel=\"selected Option\" //for people using accessibility\n    ariaHideApp={false} //error\n    closeTimeoutMS={200} //closing protal timing\n    className=\"modal\" //custom css for modal\n    onRequestClose={props.clearOptionModal} //to close the modal when pressing esc or clicking around the modal\n  >\n    <h3 className=\"modal__title\">Selected Option</h3>\n    {props.selectedOption && (\n      <p className=\"modal__body\">{props.selectedOption}</p>\n    )}\n    <button className=\"button\" onClick={props.clearOptionModal}>\n      Okay\n    </button>\n  </Modal>\n);\n\nexport default OptionModal;\n","import React from \"react\";\nimport Header from \"./Header\";\nimport Action from \"./Action\";\nimport Options from \"./Options\";\nimport AddOption from \"./AddOption\";\nimport OptionModal from \"./OptionModal\";\n\nclass IndecisionApp extends React.Component {\n  state = {\n    options: [],\n    selectedOption: undefined\n  };\n\n  componentDidMount() {\n    try {\n      const json = localStorage.getItem(\"option\");\n      const options = JSON.parse(json);\n      if (options) {\n        this.setState(() => ({ options }));\n      }\n    } catch (err) {}\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.options.length !== this.state.options.length) {\n      const json = JSON.stringify(this.state.options);\n      localStorage.setItem(\"option\", json);\n    }\n  }\n  handleDeleteOptions = () => {\n    this.setState(() => ({ options: [] }));\n  };\n\n  handleDeleteOption = (option) => {\n    this.setState((prevState) => ({\n      options: prevState.options.filter((element) => option !== element)\n    }));\n  };\n\n  handlePick = () => {\n    let randNum = Math.floor(Math.random() * this.state.options.length);\n    let option = this.state.options[randNum];\n    this.setState(() => ({\n      selectedOption: option\n    }));\n  };\n\n  handleAddOption = (option) => {\n    if (!option) {\n      return \"Enter a valid value\";\n    } else if (this.state.options.indexOf(option) > -1) {\n      return \"Option already here\";\n    }\n    this.setState((prevState) => ({\n      options: prevState.options.concat(option)\n    }));\n  };\n\n  clearOptionModal = () => {\n    this.setState(() => ({\n      selectedOption: undefined\n    }));\n  };\n\n  render() {\n    const subTitle = \"Put your life in the hands of a computer\";\n    return (\n      <div>\n        <Header subTitle={subTitle} />\n        <div className=\"container\">\n          <Action\n            hasOption={this.state.options.length > 0}\n            handlePick={this.handlePick}\n          />\n          <div className=\"widget\">\n            <Options\n              options={this.state.options}\n              handleRemoveAll={this.handleDeleteOptions}\n              handleDeleteOption={this.handleDeleteOption}\n            />\n            <AddOption handleAddOption={this.handleAddOption} />\n          </div>\n        </div>\n        <OptionModal\n          selectedOption={this.state.selectedOption}\n          clearOptionModal={this.clearOptionModal}\n        />\n      </div>\n    );\n  }\n}\n\nexport default IndecisionApp;\n","import React from \"react\";\nimport IndecisionApp from \"./Components/IndecisionApp\";\n\nconst App = () => {\n  return (\n    <div>\n      <IndecisionApp />\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/normalize.css/normalize.css\";\nimport \"./styles/styles.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}